//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QLHSBAEntities : DbContext
    {
        public QLHSBAEntities()
            : base("name=QLHSBAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<CreatedPrescription> CreatedPrescriptions { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Examination> Examinations { get; set; }
        public virtual DbSet<MedicineGroup> MedicineGroups { get; set; }
        public virtual DbSet<Medicine> Medicines { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Pay> Pays { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Prescription_Medicine> Prescription_Medicine { get; set; }
        public virtual DbSet<Prescription> Prescriptions { get; set; }
        public virtual DbSet<Receipt> Receipts { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<UsingService> UsingServices { get; set; }
        public virtual DbSet<View_CreatedPrescription_New> View_CreatedPrescription_New { get; set; }
        public virtual DbSet<View_Doctor> View_Doctor { get; set; }
        public virtual DbSet<View_Examination> View_Examination { get; set; }
        public virtual DbSet<View_MedicineGroup_ConvertID> View_MedicineGroup_ConvertID { get; set; }
        public virtual DbSet<View_Patients> View_Patients { get; set; }
        public virtual DbSet<View_Patients_Wait> View_Patients_Wait { get; set; }
        public virtual DbSet<View_Staff> View_Staff { get; set; }
        public virtual DbSet<View_UsingService> View_UsingService { get; set; }
    
        [DbFunction("QLHSBAEntities", "func_getExamHistory")]
        public virtual IQueryable<func_getExamHistory_Result> func_getExamHistory(string patientID)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_getExamHistory_Result>("[QLHSBAEntities].[func_getExamHistory](@patientID)", patientIDParameter);
        }
    
        [DbFunction("QLHSBAEntities", "func_getExamWithID")]
        public virtual IQueryable<func_getExamWithID_Result> func_getExamWithID(string examID)
        {
            var examIDParameter = examID != null ?
                new ObjectParameter("examID", examID) :
                new ObjectParameter("examID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_getExamWithID_Result>("[QLHSBAEntities].[func_getExamWithID](@examID)", examIDParameter);
        }
    
        [DbFunction("QLHSBAEntities", "func_getListService_notYet")]
        public virtual IQueryable<func_getListService_notYet_Result> func_getListService_notYet(string patientID)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_getListService_notYet_Result>("[QLHSBAEntities].[func_getListService_notYet](@patientID)", patientIDParameter);
        }
    
        [DbFunction("QLHSBAEntities", "func_getRelatives")]
        public virtual IQueryable<func_getRelatives_Result> func_getRelatives(string patientID)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_getRelatives_Result>("[QLHSBAEntities].[func_getRelatives](@patientID)", patientIDParameter);
        }
    
        [DbFunction("QLHSBAEntities", "func_listPatient_UsingService_toDay")]
        public virtual IQueryable<func_listPatient_UsingService_toDay_Result> func_listPatient_UsingService_toDay()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_listPatient_UsingService_toDay_Result>("[QLHSBAEntities].[func_listPatient_UsingService_toDay]()");
        }
    
        public virtual int DeleteDepartment(string departmentID)
        {
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDepartment", departmentIDParameter);
        }
    
        public virtual ObjectResult<FindAllDoctor_Result> FindAllDoctor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindAllDoctor_Result>("FindAllDoctor");
        }
    
        public virtual ObjectResult<FindAllPatientWait_Result> FindAllPatientWait()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindAllPatientWait_Result>("FindAllPatientWait");
        }
    
        public virtual ObjectResult<FindAllStaff_Result> FindAllStaff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindAllStaff_Result>("FindAllStaff");
        }
    
        public virtual ObjectResult<string> FindDepartmentNameByDoctorId(string doctorID)
        {
            var doctorIDParameter = doctorID != null ?
                new ObjectParameter("doctorID", doctorID) :
                new ObjectParameter("doctorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FindDepartmentNameByDoctorId", doctorIDParameter);
        }
    
        public virtual ObjectResult<string> FindFullNameDoctorByDoctorId(string doctorID)
        {
            var doctorIDParameter = doctorID != null ?
                new ObjectParameter("doctorID", doctorID) :
                new ObjectParameter("doctorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FindFullNameDoctorByDoctorId", doctorIDParameter);
        }
    
        public virtual int InsertDepartment(string departmentName)
        {
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("departmentName", departmentName) :
                new ObjectParameter("departmentName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDepartment", departmentNameParameter);
        }
    
        public virtual int InsertDoctor(string employeeFirstName, string employeeLastname, string sex, Nullable<System.DateTime> birthDay, string address, string phone, string cardID, string departmentID)
        {
            var employeeFirstNameParameter = employeeFirstName != null ?
                new ObjectParameter("employeeFirstName", employeeFirstName) :
                new ObjectParameter("employeeFirstName", typeof(string));
    
            var employeeLastnameParameter = employeeLastname != null ?
                new ObjectParameter("employeeLastname", employeeLastname) :
                new ObjectParameter("employeeLastname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("birthDay", birthDay) :
                new ObjectParameter("birthDay", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("cardID", cardID) :
                new ObjectParameter("cardID", typeof(string));
    
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDoctor", employeeFirstNameParameter, employeeLastnameParameter, sexParameter, birthDayParameter, addressParameter, phoneParameter, cardIDParameter, departmentIDParameter);
        }
    
        public virtual int InsertPatient(string patientFirstName, string patientLastname, string sex, Nullable<System.DateTime> birthDay, string address, string phone, string cardID, string patientJob, string healthInsurance, string reason)
        {
            var patientFirstNameParameter = patientFirstName != null ?
                new ObjectParameter("patientFirstName", patientFirstName) :
                new ObjectParameter("patientFirstName", typeof(string));
    
            var patientLastnameParameter = patientLastname != null ?
                new ObjectParameter("patientLastname", patientLastname) :
                new ObjectParameter("patientLastname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("birthDay", birthDay) :
                new ObjectParameter("birthDay", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("cardID", cardID) :
                new ObjectParameter("cardID", typeof(string));
    
            var patientJobParameter = patientJob != null ?
                new ObjectParameter("patientJob", patientJob) :
                new ObjectParameter("patientJob", typeof(string));
    
            var healthInsuranceParameter = healthInsurance != null ?
                new ObjectParameter("healthInsurance", healthInsurance) :
                new ObjectParameter("healthInsurance", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatient", patientFirstNameParameter, patientLastnameParameter, sexParameter, birthDayParameter, addressParameter, phoneParameter, cardIDParameter, patientJobParameter, healthInsuranceParameter, reasonParameter);
        }
    
        public virtual int InsertRelative(string relativeFirstName, string relativeLastname, string sex, Nullable<System.DateTime> birthDay, string address, string phone, string cardID, string patientID)
        {
            var relativeFirstNameParameter = relativeFirstName != null ?
                new ObjectParameter("relativeFirstName", relativeFirstName) :
                new ObjectParameter("relativeFirstName", typeof(string));
    
            var relativeLastnameParameter = relativeLastname != null ?
                new ObjectParameter("relativeLastname", relativeLastname) :
                new ObjectParameter("relativeLastname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("birthDay", birthDay) :
                new ObjectParameter("birthDay", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("cardID", cardID) :
                new ObjectParameter("cardID", typeof(string));
    
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRelative", relativeFirstNameParameter, relativeLastnameParameter, sexParameter, birthDayParameter, addressParameter, phoneParameter, cardIDParameter, patientIDParameter);
        }
    
        public virtual int InsertRelative_Exist(string patientID, string relativeID)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            var relativeIDParameter = relativeID != null ?
                new ObjectParameter("relativeID", relativeID) :
                new ObjectParameter("relativeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRelative_Exist", patientIDParameter, relativeIDParameter);
        }
    
        public virtual int InsertStaff(string employeeFirstName, string employeeLastname, string sex, Nullable<System.DateTime> birthDay, string address, string phone, string cardID, string departmentID)
        {
            var employeeFirstNameParameter = employeeFirstName != null ?
                new ObjectParameter("employeeFirstName", employeeFirstName) :
                new ObjectParameter("employeeFirstName", typeof(string));
    
            var employeeLastnameParameter = employeeLastname != null ?
                new ObjectParameter("employeeLastname", employeeLastname) :
                new ObjectParameter("employeeLastname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("birthDay", birthDay) :
                new ObjectParameter("birthDay", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("cardID", cardID) :
                new ObjectParameter("cardID", typeof(string));
    
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStaff", employeeFirstNameParameter, employeeLastnameParameter, sexParameter, birthDayParameter, addressParameter, phoneParameter, cardIDParameter, departmentIDParameter);
        }
    
        public virtual int proc_createNewNullExamination(string patientID, string employeeID)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_createNewNullExamination", patientIDParameter, employeeIDParameter);
        }
    
        public virtual int proc_InsertUsingService(string patientID, string serviceID, Nullable<byte> quantity)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            var serviceIDParameter = serviceID != null ?
                new ObjectParameter("serviceID", serviceID) :
                new ObjectParameter("serviceID", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_InsertUsingService", patientIDParameter, serviceIDParameter, quantityParameter);
        }
    
        public virtual int proc_Pay_service(Nullable<int> usingServiceID)
        {
            var usingServiceIDParameter = usingServiceID.HasValue ?
                new ObjectParameter("usingServiceID", usingServiceID) :
                new ObjectParameter("usingServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Pay_service", usingServiceIDParameter);
        }
    
        public virtual int proc_UpdateUsingService(string usingServiceID, string patientID, string serviceID, Nullable<byte> quantity)
        {
            var usingServiceIDParameter = usingServiceID != null ?
                new ObjectParameter("usingServiceID", usingServiceID) :
                new ObjectParameter("usingServiceID", typeof(string));
    
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            var serviceIDParameter = serviceID != null ?
                new ObjectParameter("serviceID", serviceID) :
                new ObjectParameter("serviceID", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_UpdateUsingService", usingServiceIDParameter, patientIDParameter, serviceIDParameter, quantityParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCountPatientsWait()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCountPatientsWait");
        }
    
        public virtual int spDeleteMedicine(string medicineID)
        {
            var medicineIDParameter = medicineID != null ?
                new ObjectParameter("medicineID", medicineID) :
                new ObjectParameter("medicineID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteMedicine", medicineIDParameter);
        }
    
        public virtual int spDeleteMedicineGroup(string medicineGroupID)
        {
            var medicineGroupIDParameter = medicineGroupID != null ?
                new ObjectParameter("medicineGroupID", medicineGroupID) :
                new ObjectParameter("medicineGroupID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteMedicineGroup", medicineGroupIDParameter);
        }
    
        public virtual int spDeletePrescription_Medicine(string prescriptionID, string medicineName)
        {
            var prescriptionIDParameter = prescriptionID != null ?
                new ObjectParameter("prescriptionID", prescriptionID) :
                new ObjectParameter("prescriptionID", typeof(string));
    
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("medicineName", medicineName) :
                new ObjectParameter("medicineName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeletePrescription_Medicine", prescriptionIDParameter, medicineNameParameter);
        }
    
        public virtual ObjectResult<string> spExaminateIDNext()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spExaminateIDNext");
        }
    
        public virtual ObjectResult<spFindAllMedicine1_Result> spFindAllMedicine1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFindAllMedicine1_Result>("spFindAllMedicine1");
        }
    
        public virtual ObjectResult<spFindAllMedicine1ByMedicineName_Result> spFindAllMedicine1ByMedicineName(string medicineName)
        {
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("medicineName", medicineName) :
                new ObjectParameter("medicineName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFindAllMedicine1ByMedicineName_Result>("spFindAllMedicine1ByMedicineName", medicineNameParameter);
        }
    
        public virtual ObjectResult<spFindAllMedicineGroup_Result> spFindAllMedicineGroup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFindAllMedicineGroup_Result>("spFindAllMedicineGroup");
        }
    
        public virtual ObjectResult<spFindAllPrescription_Medicine_Result> spFindAllPrescription_Medicine(string prescriptionID)
        {
            var prescriptionIDParameter = prescriptionID != null ?
                new ObjectParameter("prescriptionID", prescriptionID) :
                new ObjectParameter("prescriptionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFindAllPrescription_Medicine_Result>("spFindAllPrescription_Medicine", prescriptionIDParameter);
        }
    
        public virtual ObjectResult<string> spGetPrescriptionID_New()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetPrescriptionID_New");
        }
    
        public virtual int spInsertExamination(string patientID, string employeeID, Nullable<double> height, Nullable<double> weight, Nullable<double> temperature, Nullable<int> breathing, string symptom, Nullable<int> veins, Nullable<int> bloodPressure, string preliminaryDiagnosis, string finalDiagnosis, string treatmentDirection)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(string));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("height", height) :
                new ObjectParameter("height", typeof(double));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(double));
    
            var temperatureParameter = temperature.HasValue ?
                new ObjectParameter("temperature", temperature) :
                new ObjectParameter("temperature", typeof(double));
    
            var breathingParameter = breathing.HasValue ?
                new ObjectParameter("breathing", breathing) :
                new ObjectParameter("breathing", typeof(int));
    
            var symptomParameter = symptom != null ?
                new ObjectParameter("symptom", symptom) :
                new ObjectParameter("symptom", typeof(string));
    
            var veinsParameter = veins.HasValue ?
                new ObjectParameter("veins", veins) :
                new ObjectParameter("veins", typeof(int));
    
            var bloodPressureParameter = bloodPressure.HasValue ?
                new ObjectParameter("bloodPressure", bloodPressure) :
                new ObjectParameter("bloodPressure", typeof(int));
    
            var preliminaryDiagnosisParameter = preliminaryDiagnosis != null ?
                new ObjectParameter("preliminaryDiagnosis", preliminaryDiagnosis) :
                new ObjectParameter("preliminaryDiagnosis", typeof(string));
    
            var finalDiagnosisParameter = finalDiagnosis != null ?
                new ObjectParameter("finalDiagnosis", finalDiagnosis) :
                new ObjectParameter("finalDiagnosis", typeof(string));
    
            var treatmentDirectionParameter = treatmentDirection != null ?
                new ObjectParameter("treatmentDirection", treatmentDirection) :
                new ObjectParameter("treatmentDirection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertExamination", patientIDParameter, employeeIDParameter, heightParameter, weightParameter, temperatureParameter, breathingParameter, symptomParameter, veinsParameter, bloodPressureParameter, preliminaryDiagnosisParameter, finalDiagnosisParameter, treatmentDirectionParameter);
        }
    
        public virtual int spInsertMedicine(string medicineName, string unit, Nullable<int> medicinePrice, Nullable<int> expiry, Nullable<int> count, string shape, string medicineGroupName)
        {
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("medicineName", medicineName) :
                new ObjectParameter("medicineName", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            var medicinePriceParameter = medicinePrice.HasValue ?
                new ObjectParameter("medicinePrice", medicinePrice) :
                new ObjectParameter("medicinePrice", typeof(int));
    
            var expiryParameter = expiry.HasValue ?
                new ObjectParameter("expiry", expiry) :
                new ObjectParameter("expiry", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var shapeParameter = shape != null ?
                new ObjectParameter("shape", shape) :
                new ObjectParameter("shape", typeof(string));
    
            var medicineGroupNameParameter = medicineGroupName != null ?
                new ObjectParameter("medicineGroupName", medicineGroupName) :
                new ObjectParameter("medicineGroupName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertMedicine", medicineNameParameter, unitParameter, medicinePriceParameter, expiryParameter, countParameter, shapeParameter, medicineGroupNameParameter);
        }
    
        public virtual int spInsertMedicineGroup(string medicineGroupName)
        {
            var medicineGroupNameParameter = medicineGroupName != null ?
                new ObjectParameter("medicineGroupName", medicineGroupName) :
                new ObjectParameter("medicineGroupName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertMedicineGroup", medicineGroupNameParameter);
        }
    
        public virtual int spInsertPrescription_Medicine(string prescriptionID, string medicineName, Nullable<int> quanlity)
        {
            var prescriptionIDParameter = prescriptionID != null ?
                new ObjectParameter("prescriptionID", prescriptionID) :
                new ObjectParameter("prescriptionID", typeof(string));
    
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("medicineName", medicineName) :
                new ObjectParameter("medicineName", typeof(string));
    
            var quanlityParameter = quanlity.HasValue ?
                new ObjectParameter("quanlity", quanlity) :
                new ObjectParameter("quanlity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertPrescription_Medicine", prescriptionIDParameter, medicineNameParameter, quanlityParameter);
        }
    
        public virtual int spInsertPrescription_Null(string patientID, string employeeID)
        {
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("employeeID", employeeID) :
                new ObjectParameter("employeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertPrescription_Null", patientIDParameter, employeeIDParameter);
        }
    
        public virtual int spUpdateMedicine(string medicineName, string unit, Nullable<int> medicinePrice, Nullable<int> expiry, Nullable<int> count, string shape, string medicineGroupName, string medicineID)
        {
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("medicineName", medicineName) :
                new ObjectParameter("medicineName", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            var medicinePriceParameter = medicinePrice.HasValue ?
                new ObjectParameter("medicinePrice", medicinePrice) :
                new ObjectParameter("medicinePrice", typeof(int));
    
            var expiryParameter = expiry.HasValue ?
                new ObjectParameter("expiry", expiry) :
                new ObjectParameter("expiry", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            var shapeParameter = shape != null ?
                new ObjectParameter("shape", shape) :
                new ObjectParameter("shape", typeof(string));
    
            var medicineGroupNameParameter = medicineGroupName != null ?
                new ObjectParameter("medicineGroupName", medicineGroupName) :
                new ObjectParameter("medicineGroupName", typeof(string));
    
            var medicineIDParameter = medicineID != null ?
                new ObjectParameter("medicineID", medicineID) :
                new ObjectParameter("medicineID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateMedicine", medicineNameParameter, unitParameter, medicinePriceParameter, expiryParameter, countParameter, shapeParameter, medicineGroupNameParameter, medicineIDParameter);
        }
    
        public virtual int spUpdateMedicineGroup(string medicineGroupID, string medicineGroupName)
        {
            var medicineGroupIDParameter = medicineGroupID != null ?
                new ObjectParameter("medicineGroupID", medicineGroupID) :
                new ObjectParameter("medicineGroupID", typeof(string));
    
            var medicineGroupNameParameter = medicineGroupName != null ?
                new ObjectParameter("medicineGroupName", medicineGroupName) :
                new ObjectParameter("medicineGroupName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateMedicineGroup", medicineGroupIDParameter, medicineGroupNameParameter);
        }
    
        public virtual int spUpdatePrescription(string prescriptionID, string descriptionPrescription)
        {
            var prescriptionIDParameter = prescriptionID != null ?
                new ObjectParameter("prescriptionID", prescriptionID) :
                new ObjectParameter("prescriptionID", typeof(string));
    
            var descriptionPrescriptionParameter = descriptionPrescription != null ?
                new ObjectParameter("descriptionPrescription", descriptionPrescription) :
                new ObjectParameter("descriptionPrescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdatePrescription", prescriptionIDParameter, descriptionPrescriptionParameter);
        }
    
        public virtual int spUpdatePrescription_Medicine(string prescriptionID, string medicineName, Nullable<int> quanlity)
        {
            var prescriptionIDParameter = prescriptionID != null ?
                new ObjectParameter("prescriptionID", prescriptionID) :
                new ObjectParameter("prescriptionID", typeof(string));
    
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("medicineName", medicineName) :
                new ObjectParameter("medicineName", typeof(string));
    
            var quanlityParameter = quanlity.HasValue ?
                new ObjectParameter("quanlity", quanlity) :
                new ObjectParameter("quanlity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdatePrescription_Medicine", prescriptionIDParameter, medicineNameParameter, quanlityParameter);
        }
    
        public virtual int UpdateDepartment(string departmentName, string departmentID)
        {
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("departmentName", departmentName) :
                new ObjectParameter("departmentName", typeof(string));
    
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDepartment", departmentNameParameter, departmentIDParameter);
        }
    
        public virtual int UpdateDoctor_Staff(string employeeFirstName, string employeeLastname, string sex, Nullable<System.DateTime> birthDay, string address, string phone, string cardID, string departmentID, string peopleID)
        {
            var employeeFirstNameParameter = employeeFirstName != null ?
                new ObjectParameter("employeeFirstName", employeeFirstName) :
                new ObjectParameter("employeeFirstName", typeof(string));
    
            var employeeLastnameParameter = employeeLastname != null ?
                new ObjectParameter("employeeLastname", employeeLastname) :
                new ObjectParameter("employeeLastname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("birthDay", birthDay) :
                new ObjectParameter("birthDay", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("cardID", cardID) :
                new ObjectParameter("cardID", typeof(string));
    
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(string));
    
            var peopleIDParameter = peopleID != null ?
                new ObjectParameter("peopleID", peopleID) :
                new ObjectParameter("peopleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDoctor_Staff", employeeFirstNameParameter, employeeLastnameParameter, sexParameter, birthDayParameter, addressParameter, phoneParameter, cardIDParameter, departmentIDParameter, peopleIDParameter);
        }
    
        public virtual int UpdatePatient(string patientFirstName, string patientLastname, string sex, Nullable<System.DateTime> birthDay, string address, string phone, string cardID, string patientJob, string healthInsurance_, string reason, string peopleID)
        {
            var patientFirstNameParameter = patientFirstName != null ?
                new ObjectParameter("patientFirstName", patientFirstName) :
                new ObjectParameter("patientFirstName", typeof(string));
    
            var patientLastnameParameter = patientLastname != null ?
                new ObjectParameter("patientLastname", patientLastname) :
                new ObjectParameter("patientLastname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("birthDay", birthDay) :
                new ObjectParameter("birthDay", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("cardID", cardID) :
                new ObjectParameter("cardID", typeof(string));
    
            var patientJobParameter = patientJob != null ?
                new ObjectParameter("patientJob", patientJob) :
                new ObjectParameter("patientJob", typeof(string));
    
            var healthInsurance_Parameter = healthInsurance_ != null ?
                new ObjectParameter("healthInsurance_", healthInsurance_) :
                new ObjectParameter("healthInsurance_", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            var peopleIDParameter = peopleID != null ?
                new ObjectParameter("peopleID", peopleID) :
                new ObjectParameter("peopleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatient", patientFirstNameParameter, patientLastnameParameter, sexParameter, birthDayParameter, addressParameter, phoneParameter, cardIDParameter, patientJobParameter, healthInsurance_Parameter, reasonParameter, peopleIDParameter);
        }
    
        public virtual int UpdateRelative(string relativeFirstName, string relativeLastname, string sex, Nullable<System.DateTime> birthDay, string address, string phone, string cardID, string patientID, string relativeID)
        {
            var relativeFirstNameParameter = relativeFirstName != null ?
                new ObjectParameter("relativeFirstName", relativeFirstName) :
                new ObjectParameter("relativeFirstName", typeof(string));
    
            var relativeLastnameParameter = relativeLastname != null ?
                new ObjectParameter("relativeLastname", relativeLastname) :
                new ObjectParameter("relativeLastname", typeof(string));
    
            var sexParameter = sex != null ?
                new ObjectParameter("sex", sex) :
                new ObjectParameter("sex", typeof(string));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("birthDay", birthDay) :
                new ObjectParameter("birthDay", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var cardIDParameter = cardID != null ?
                new ObjectParameter("cardID", cardID) :
                new ObjectParameter("cardID", typeof(string));
    
            var patientIDParameter = patientID != null ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(string));
    
            var relativeIDParameter = relativeID != null ?
                new ObjectParameter("relativeID", relativeID) :
                new ObjectParameter("relativeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRelative", relativeFirstNameParameter, relativeLastnameParameter, sexParameter, birthDayParameter, addressParameter, phoneParameter, cardIDParameter, patientIDParameter, relativeIDParameter);
        }
    }
}
